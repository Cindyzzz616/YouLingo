"""
This type stub file was generated by pyright.
"""

import decorator

"""Decorators used by moviepy."""
@decorator.decorator
def outplace(func, clip, *args, **kwargs):
    """Applies ``func(clip.copy(), *args, **kwargs)`` and returns ``clip.copy()``."""
    ...

@decorator.decorator
def convert_masks_to_RGB(func, clip, *args, **kwargs):
    """If the clip is a mask, convert it to RGB before running the function."""
    ...

@decorator.decorator
def apply_to_mask(func, clip, *args, **kwargs):
    """Applies the same function ``func`` to the mask of the clip created with
    ``func``.
    """
    ...

@decorator.decorator
def apply_to_audio(func, clip, *args, **kwargs):
    """Applies the function ``func`` to the audio of the clip created with ``func``."""
    ...

@decorator.decorator
def requires_duration(func, clip, *args, **kwargs):
    """Raises an error if the clip has no duration."""
    ...

@decorator.decorator
def requires_fps(func, clip, *args, **kwargs):
    """Raises an error if the clip has no fps."""
    ...

@decorator.decorator
def audio_video_effect(func, effect, clip, *args, **kwargs):
    """Use an audio function on a video/audio clip.

    This decorator tells that the function func (audioclip -> audioclip)
    can be also used on a video clip, at which case it returns a
    videoclip with unmodified video and modified audio.
    """
    ...

def preprocess_args(preprocess_func, varnames): # -> Callable[..., Any]:
    """Applies preprocess_func to variables in varnames before launching
    the function.
    """
    ...

def convert_parameter_to_seconds(varnames): # -> Callable[..., Any]:
    """Converts the specified variables to seconds."""
    ...

def convert_path_to_string(varnames): # -> Callable[..., Any]:
    """Converts the specified variables to a path string."""
    ...

@decorator.decorator
def add_mask_if_none(func, clip, *args, **kwargs):
    """Add a mask to the clip if there is none."""
    ...

def use_clip_fps_by_default(func):
    """Will use ``clip.fps`` if no ``fps=...`` is provided in **kwargs**."""
    ...

