"""
This type stub file was generated by pyright.
"""

"""MoviePy audio reading with ffmpeg."""
class FFMPEG_AudioReader:
    """A class to read the audio in either video files or audio files
    using ffmpeg. ffmpeg will read any audio and transform them into
    raw data.

    Parameters
    ----------

    filename
      Name of any video or audio file, like ``video.mp4`` or
      ``sound.wav`` etc.

    buffersize
      The size of the buffer to use. Should be bigger than the buffer
      used by ``write_audiofile``

    print_infos
      Print the ffmpeg infos on the file being read (for debugging)

    fps
      Desired frames per second in the decoded signal that will be
      received from ffmpeg

    nbytes
      Desired number of bytes (1,2,4) in the signal that will be
      received from ffmpeg
    """
    def __init__(self, filename, buffersize, decode_file=..., print_infos=..., fps=..., nbytes=..., nchannels=...) -> None:
        ...
    
    def initialize(self, start_time=...): # -> None:
        """Opens the file, creates the pipe."""
        ...
    
    def skip_chunk(self, chunksize): # -> None:
        """Skip a chunk of audio data by reading and discarding the specified number of
        frames from the audio stream. The audio stream is read from the `proc` stdout.
        After skipping the chunk, the `pos` attribute is updated accordingly.

        Parameters
        ----------
        chunksize (int):
          The number of audio frames to skip.
        """
        ...
    
    def read_chunk(self, chunksize): # -> NDArray[float64]:
        """Read a chunk of audio data from the audio stream.

        This method reads a chunk of audio data from the audio stream. The
        specified number of frames, given by `chunksize`, is read from the
        `proc` stdout. The audio data is returned as a NumPy array, where
        each row corresponds to a frame and each column corresponds to a
        channel. If there is not enough audio left to read, the remaining
        portion is padded with zeros, ensuring that the returned array has
        the desired length. The `pos` attribute is updated accordingly.

        Parameters
        ----------
        chunksize (float):
          The desired number of audio frames to read.

        """
        ...
    
    def seek(self, pos): # -> None:
        """Read a frame at time t. Note for coders: getting an arbitrary
        frame in the video with ffmpeg can be painfully slow if some
        decoding has to be done. This function tries to avoid fectching
        arbitrary frames whenever possible, by moving between adjacent
        frames.
        """
        ...
    
    def get_frame(self, tt): # -> NDArray[float64] | _Array[tuple[int, int], float64] | _Array1D[float64] | Any:
        """Retrieve the audio frame(s) corresponding to the given timestamp(s).

        Parameters
        ----------
        tt (float or numpy.ndarray):
          The timestamp(s) at which to retrieve the audio frame(s).
          If `tt` is a single float value, the frame corresponding to that
          timestamp is returned. If `tt` is a NumPy array of timestamps, an
          array of frames corresponding to each timestamp is returned.
        """
        ...
    
    def buffer_around(self, frame_number): # -> None:
        """Fill the buffer with frames, centered on frame_number if possible."""
        ...
    
    def close(self): # -> None:
        """Closes the reader, terminating the subprocess if is still alive."""
        ...
    
    def __del__(self): # -> None:
        ...
    


