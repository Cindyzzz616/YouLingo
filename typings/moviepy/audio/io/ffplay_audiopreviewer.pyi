"""
This type stub file was generated by pyright.
"""

from moviepy.decorators import requires_duration

"""MoviePy audio writing with ffmpeg."""
class FFPLAY_AudioPreviewer:
    """
    A class to preview an AudioClip.

    Parameters
    ----------

    fps_input
      Frames per second of the input audio (given by the AudioClip being
      written down).

    nbytes:
      Number of bytes to encode the sound: 1 for 8bit sound, 2 for
      16bit, 4 for 32bit sound. Default is 2 bytes, it's fine.

    nchannels:
      Number of audio channels in the clip. Default to 2 channels.
    """
    def __init__(self, fps_input, nbytes=..., nchannels=...) -> None:
        ...
    
    def write_frames(self, frames_array): # -> None:
        """Send a raw audio frame (a chunck of audio) to ffplay to be played"""
        ...
    
    def close(self): # -> None:
        """Closes the writer, terminating the subprocess if is still alive."""
        ...
    
    def __del__(self): # -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    


@requires_duration
def ffplay_audiopreview(clip, fps=..., buffersize=..., nbytes=..., audio_flag=..., video_flag=...): # -> None:
    """
    A function that wraps the FFPLAY_AudioPreviewer to preview an AudioClip

    Parameters
    ----------

    fps
       Frame rate of the sound. 44100 gives top quality, but may cause
       problems if your computer is not fast enough and your clip is
       complicated. If the sound jumps during the preview, lower it
       (11025 is still fine, 5000 is tolerable).

    buffersize
      The sound is not generated all at once, but rather made by bunches
      of frames (chunks). ``buffersize`` is the size of such a chunk.
      Try varying it if you meet audio problems (but you shouldn't
      have to).

    nbytes:
      Number of bytes to encode the sound: 1 for 8bit sound, 2 for
      16bit, 4 for 32bit sound. 2 bytes is fine.

    audio_flag, video_flag:
      Instances of class threading events that are used to synchronize
      video and audio during ``VideoClip.preview()``.
    """
    ...

